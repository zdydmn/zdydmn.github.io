import{_ as s,o as a,c as l,O as n}from"./chunks/framework.95b9d657.js";const C=JSON.parse('{"title":"this指向详解","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/this.md","filePath":"JavaScript/this.md"}'),o={name:"JavaScript/this.md"},p=n(`<h1 id="this指向详解" tabindex="-1">this指向详解 <a class="header-anchor" href="#this指向详解" aria-label="Permalink to &quot;this指向详解&quot;">​</a></h1><blockquote><p>通过本篇你将学习到:</p><ol><li>在JS中如何判读this指向</li><li>this绑定的优先级</li><li>bind，call，apply方法的区别</li></ol></blockquote><p><code>this</code> 是JS的关键字，它的指向在不同情况下会有所不同。<strong>一句话概括下来：this是一个变量，指向了某个对象保存在堆中的数据</strong>。在默认情况下，this指向window全局变量。下面通过几个函数调用场景来初步认识一下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><ul><li>首先我们需要<strong>知道在函数直接调用时，this指向全局对象。</strong> 所以当直接执行foo时this指向全局window，此时<code>this.a = 1</code></li><li><strong>当函数作为一个对象的方法被调用时，此时this指向这个对象。</strong> 所以<code>obj.foo()</code>，打印<code>this.a = obj.a = 2</code></li><li>第三次调用是<strong>通过关键字new调用，我们知道通过new调用时，会返回一个新的对象，此时this指向的是这个新对象</strong>c，c中并没有a这个属性，因此<code>this.a 就是undefined</code></li></ul><p>其实当我们理解上述函数调用就可以解决大部分this指向问题，下面我们来看一下箭头函数中的this指向。</p><h2 id="箭头函数中的this指向" tabindex="-1">箭头函数中的this指向 <a class="header-anchor" href="#箭头函数中的this指向" aria-label="Permalink to &quot;箭头函数中的this指向&quot;">​</a></h2><blockquote><p>下面通过一个🌰，认识一下箭头函数中的this</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>首先我们要知道因为箭头函数没有<code>prototype</code>，因此箭头函数本身是没有this的。<strong>箭头函数的this其实是继承于在定义的时候外层第一个普通函数的this</strong>。所以这个上述代码就不难看出这个this就是a的this指向window。 读到这里我们已经了解了JS基础的this指向，下面我们介绍一下<code>bind</code>，<code>call</code>，<code>apply</code>三个方法。</p><h2 id="bind-apply-call方法修改this指向" tabindex="-1">bind，apply，call方法修改this指向 <a class="header-anchor" href="#bind-apply-call方法修改this指向" aria-label="Permalink to &quot;bind，apply，call方法修改this指向&quot;">​</a></h2><blockquote><p>注意：这三个方法不能修改箭头函数的this指向</p></blockquote><h3 id="bind方法" tabindex="-1">bind方法 <a class="header-anchor" href="#bind方法" aria-label="Permalink to &quot;bind方法&quot;">​</a></h3><p><code>bind()</code>方法，会接受多个参数：</p><ol><li>第一个参数为this绑定的对象；</li><li>后续的参数为执行函数时传入的参数。</li></ol><p>在执行完<code>fn.bind()</code>后，会返回一个新的函数，新函数除了this指向为执行bind方法时绑定的this，其他没有变化。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> resFoo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#82AAFF;">resFoo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><h3 id="apply方法" tabindex="-1">apply方法 <a class="header-anchor" href="#apply方法" aria-label="Permalink to &quot;apply方法&quot;">​</a></h3><blockquote><p>经过<code>函数.apply()</code>会立即执行</p></blockquote><p><code>apply()</code>方法，接受两个参数</p><ol><li>第一个参数为this绑定的对象</li><li>第二个参数为参数数组</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1, []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 2, [1, 2, 3]</span></span></code></pre></div><h3 id="call方法" tabindex="-1">call方法 <a class="header-anchor" href="#call方法" aria-label="Permalink to &quot;call方法&quot;">​</a></h3><blockquote><p>经过<code>函数.call()</code>会立即执行</p></blockquote><p><code>call()</code>方法，接受多个参数</p><ol><li>第一个参数为this绑定的对象</li><li>后面的参数为执行函数时传入的参数</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1, []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 2, [1, 2, 3]</span></span></code></pre></div><h2 id="总结一下" tabindex="-1">总结一下 <a class="header-anchor" href="#总结一下" aria-label="Permalink to &quot;总结一下&quot;">​</a></h2><blockquote><p>最后我们对本文知识点进行一下总结：</p></blockquote><p><strong>面试题: 如何判断this指向</strong></p><details class="details custom-block"><summary>点我查看</summary><ol><li><strong>函数调用：</strong> 当一个函数不是作为对象属性，而是作为函数来调用的时候，this指向全局对象</li><li><strong>方法调用：</strong> 如果一个函数作为一个对象的方法来调用时，this 指向这个对象</li><li><strong>构造器调用：</strong> 如果函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象</li><li><strong>apply，bind， call的调用：</strong> 三个方法第一个参数为this的指向，如果参数为空则默认指向window</li><li><strong>箭头函数的this：</strong> 箭头函数本身没有this，箭头函数的this继承于在定义的时候外层第一个普通函数的this</li></ol></details><p><strong>面试题: this绑定的优先级</strong></p><details class="details custom-block"><summary>点我查看</summary><p>new绑定优先级 &gt; 显示绑定优先级 &gt; 隐式绑定优先级 &gt; 默认绑定优先级</p><ul><li>显示绑定：apply，bind，call这些函数</li><li>隐式绑定：对象将函数当作属性调用</li><li>默认绑定：函数调用</li><li><strong>箭头函数的this一旦绑定，就不会被任何方式改变</strong></li></ul></details><p><strong>面试题: 讲讲<code>bind</code>,<code>call</code>,<code>apply</code>三个方法的区别</strong></p><details class="details custom-block"><summary>点我查看</summary><p>针对<code>bind</code>,<code>call</code>,<code>apply</code>我们可以从三个方向进行分析</p><ol><li>传参 <ul><li><code>call</code>方法接受多个参数</li><li><code>bind</code>和<code>apply</code>方法接受一个包含多个参数的数组</li></ul></li><li>返回值 <ul><li><code>call</code>和<code>apply</code>方法返回的是等同于原函数的返回值</li><li><code>bind</code>方法返回的是改变this和参数之后的新函数</li></ul></li><li>执行方式 <ul><li><code>call</code>和<code>apply</code>方法在this指向改变后就立即执行</li><li><code>bind</code>方法改变后不会立即执行，而是返回一个新的函数</li></ul></li></ol></details>`,35),e=[p];function t(c,r,i,y,F,D){return a(),l("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
