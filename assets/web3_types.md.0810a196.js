import{_ as o,o as e,c as a,O as s}from"./chunks/framework.95b9d657.js";const C=JSON.parse('{"title":"入门Solidity---1. Solidity的变量类型","description":"","frontmatter":{},"headers":[],"relativePath":"web3/types.md","filePath":"web3/types.md"}'),t={name:"web3/types.md"},c=s(`<h1 id="入门solidity-1-solidity的变量类型" tabindex="-1">入门Solidity---1. Solidity的变量类型 <a class="header-anchor" href="#入门solidity-1-solidity的变量类型" aria-label="Permalink to &quot;入门Solidity---1. Solidity的变量类型&quot;">​</a></h1><p>在Solidity中变量类型包括一下几种：</p><ol><li><strong>数值类型：</strong> 包括布尔，字符串，整型，函数等，这类变量赋值时候直接传递数值。</li><li><strong>引用类型：</strong> 包括数组，结构体等，这类变量占空间大，赋值时候直接传递地址。</li><li><strong>映射类型：</strong> Solidity的哈希表</li></ol><p>下面会介绍Solidity的常用数据类型。</p><h2 id="数值类型" tabindex="-1">数值类型 <a class="header-anchor" href="#数值类型" aria-label="Permalink to &quot;数值类型&quot;">​</a></h2><h3 id="_1-布尔类型" tabindex="-1">1. 布尔类型 <a class="header-anchor" href="#_1-布尔类型" aria-label="Permalink to &quot;1. 布尔类型&quot;">​</a></h3><p>布尔类型分为两个值: <code>true</code> 和 <code>false</code>。</p><div class="language-Solidity"><button title="Copy Code" class="copy"></button><span class="lang">Solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> _bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>和JS类似我们也可以通过一些运算符去计算布尔值：<code>!</code>, <code>!=</code>, <code>==</code>, <code>||</code>, <code>&amp;&amp;</code>。值的注意的是，在Solidity中 <code>&amp;&amp;</code> 和 <code>||</code>运算符遵循短路规则，例如 <code>a || b</code>，如果<code>a</code>的值为<code>true</code>，那么<code>||</code>运算符后的代码变不会被计算。</p><h3 id="_2-整型" tabindex="-1">2. 整型 <a class="header-anchor" href="#_2-整型" aria-label="Permalink to &quot;2. 整型&quot;">​</a></h3><p>整型用于表示整数值。在 <code>Solidity</code> 中的整型分为无符号整型（<code>uint</code>）和有符号整型（<code>int</code>）。在根据位数的不同，以uint为例又可以分为<code>uint8</code>、<code>uint16</code>、<code>uint24</code>、<code>uint32</code>、<code>uint64</code> 和 <code>uint256</code>。分别是8位，16位，24位...整数。默认为<code>uint256</code>。</p><div class="language-Solidity"><button title="Copy Code" class="copy"></button><span class="lang">Solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">uint</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> _uint </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> _int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">123</span></span></code></pre></div><p>常用的整型运算符包括：</p><ul><li>比较运算符（返回布尔值）： <code>&lt;=</code>， <code>&lt;</code>， <code>==</code>， <code>!=</code>， <code>&gt;=</code>， <code>&gt;</code>;</li><li>算数运算符： <code>+</code>， <code>-</code>， <code>*</code>， <code>/</code>， <code>%（取余）</code>，<code>**（幂）</code></li></ul><h3 id="_3-地址类型" tabindex="-1">3. 地址类型 <a class="header-anchor" href="#_3-地址类型" aria-label="Permalink to &quot;3. 地址类型&quot;">​</a></h3><p>址类型(address)存储一个 20 字节的值（以太坊地址的大小）。</p>`,16),l=[c];function d(n,i,p,r,y,u){return e(),a("div",null,l)}const _=o(t,[["render",d]]);export{C as __pageData,_ as default};
