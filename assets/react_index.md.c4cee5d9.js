import{_ as e,o as c,c as o,O as t}from"./chunks/framework.95b9d657.js";const h=JSON.parse('{"title":"React 基础知识点","description":"","frontmatter":{},"headers":[],"relativePath":"react/index.md","filePath":"react/index.md"}'),d={name:"react/index.md"},a=t('<h1 id="react-基础知识点" tabindex="-1">React 基础知识点 <a class="header-anchor" href="#react-基础知识点" aria-label="Permalink to &quot;React 基础知识点&quot;">​</a></h1><p>记录几道常见的React面试题</p><h2 id="详细说说react和vue的区别" tabindex="-1">详细说说React和Vue的区别 <a class="header-anchor" href="#详细说说react和vue的区别" aria-label="Permalink to &quot;详细说说React和Vue的区别&quot;">​</a></h2><p>首先从实现流程和原理方面React和Vue是基本一致的，都采用了<code>VDOM + Diff算法</code>的方式，以及组件化和数据驱动的思想。无论是是Vue还是React，最终都是要根据<code>render函数</code>的执行去返回VDOM。并且在每一次UI更新的时候，<code>render函数</code>会重新返回新的VDOM，然后跟以前缓存起来老的VNode进行比对，再使用Diff算法去更新真是DOM。下面会通过几个不同的方向去介绍两者的区别：</p><ol><li><strong>响应式原理不同</strong><ul><li>vue 的响应式：在vue2中响应式的特点是通过依赖收集，数据可变，自动派发更新。在初始化的时候通过<code>Object.defineProperty</code>递归劫持<code>data</code>所有属性添加 <code>getter</code>/<code>setter</code>，触发 <code>getter</code> 的时候进行依赖收集，修改时触发 <code>setter</code> 自动派发更新找到引用组件重新渲染。随着Vue3版本的推出，vue团队也是用来Proxy对vue的响应式进行了重构；</li><li>React的响应式：React的响应式是基于状态发生的，在React中数据是单向流动的。需要通过<code>setState</code>方法去手动更新，而且当数据改变时会以组件根为目录，默认全部重新渲染整个组件树，只能额外用 <code>pureComponent</code>/<code>shouldComponentUpdate</code>/<code>useMemo</code>/<code>useCallback</code> 等方法来进行控制。</li></ul></li><li><strong>diff算法不同</strong><ul><li>vue的diff算法：在vue2中，diff算法是比较同层的VDOM，如果新的存在老的不存在就创建，如果新的不存在老的存在就删除。因为Vue的VDOM结构是数组，因此子节点会采用双指针的方式对头尾两端进行对比，全量<code>diff</code>，然后移动节点时通过 <code>splice</code> 进行数组操作。vue3则对这一点进行了优化使用了Map这一数据结构并采用动静结合的策略，在编辑阶段对静态节点提前进行标记，在Diff过程中就会直接跳过标记的节点。并且子节点对比会使用一个 <code>source</code> 数组来记录节点位置及最长递增子序列算法优化了对比流程，快速 <code>Diff</code>，需要处理的边际条件会更少。</li><li>React的diff算法：React的diff算法是同层递归比较，标记差异点保存到 <code>Diff</code> 队列保存，得到 <code>patch</code> 树，再统一操作批量更新 <code>DOM</code>。React的diff操作主要存在三个操作（移动，增减和函数）。如果结构发生改变就直接卸载重新创建，如果没有则将节点在新集合中的位置和老集合中的 <code>lastIndex</code> 进行比较是否需要移动，如果遍历过程中发现新集合没有，但老集合有就删除。</li></ul></li><li><strong>核心思想不同</strong><ul><li><code>Vue依然会定位简单易上手（渐进式开发），依然是考虑通过依赖收集来实现数据可变。</code>这点从Vue3核心更新内容可以看到：template语法基本不变、options api只增加了setup选项（composition api）、基于依赖收集（Proxy）的数据可变</li><li>React的函数式编程这个基本盘不会变。React核心思想，是把UI作为Basic Type，比如String、Array类型，然后经过render处理，转换为另外一个value（纯函数）。从React Hooks可以看出，React团队致力于组件函数式编程，（纯组件，无class组件），尽量减少副作用（减少this，this会引起副作用）。</li></ul></li></ol>',5),i=[a];function r(l,s,n,u,f,p){return c(),o("div",null,i)}const R=e(d,[["render",r]]);export{h as __pageData,R as default};
