import{_ as s,o as n,c as l,O as a}from"./chunks/framework.95b9d657.js";const o="/javaScript/eventLoop_chrom.jpg",p="/javaScript/node_eventLoop.jpg",m=JSON.parse('{"title":"事件循环机制","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/eventLoop.md","filePath":"JavaScript/eventLoop.md"}'),e={name:"JavaScript/eventLoop.md"},t=a('<h1 id="事件循环机制" tabindex="-1">事件循环机制 <a class="header-anchor" href="#事件循环机制" aria-label="Permalink to &quot;事件循环机制&quot;">​</a></h1><blockquote><p>通过本篇你将学习到:</p><ul><li>如何理解JS的异步?</li><li>如何描述浏览器中的事件循环？</li><li>JS中的计时器能做到精确计时吗？为什么？</li><li>如何描述NodeJs中的事件循环？</li><li>node 和 chrome 的事件循环有什么区别？</li></ul></blockquote><p>首先什么是事件循环（EventLoop），<strong>在JS中事件循环是一种机制，用于处理异步操作和定时任务</strong>。</p><p>首先先来一道经典的面试题：<strong>如何理解JS的异步？</strong></p><details class="details custom-block"><summary>点我查看</summary><p>JavaScript 是一门单线程的语言，这是因为 JavaScript 代码在执行时只能在一个线程中运行。下面以浏览器为例讲讲我对异步的理解。</p><p>在浏览器中，JavaScript 代码通常运行在渲染主线程中，而渲染主线程只有一个。同时渲染主线程需要负责多种任务的执行包括：解析HTML/CSS；渲染页面；布局；执行JS代码等。 如果采用同步的方式，既有可能造成浏览器的阻塞，从而造成消息队列中的其他任务无法得到执行。这样一来不仅白白消耗了主线程的时间，而且会以你为业务无法及时更新，造成浏览器卡死的现象，给用户带来不好的体验。</p><p>所以为了避免上述情况，浏览器采用异步的方式。当某些不能立即执行的任务（计时器，网络，事件监听等）发生时，主线程会将任务交给其他线程去处理，而自身会立即结束任务的执行，转而去执行后续的代码。当其他线程完成任务时，会将任务的回调函数包装成一个新的任务并插入到消息队列的末尾，等待主线程的调度执行。 在这种异步模式下，浏览器不会阻塞，大幅度提高了单线程的运行效率。</p></details><h2 id="浏览器中的事件循环" tabindex="-1">浏览器中的事件循环 <a class="header-anchor" href="#浏览器中的事件循环" aria-label="Permalink to &quot;浏览器中的事件循环&quot;">​</a></h2><p>浏览器是一个多进程多线程的应用程序，这样的设计可以避免进程之间的相互影响，减少连环崩坏的几率。当我们开启浏览器时，它会创建多个进程，其中主要包括浏览器进程、网络进程和渲染进程等。每个进程负责处理不同的任务。</p><p>在渲染进程启动时，会创建一个渲染主线程，该线程负责解析 HTML、CSS 和 JavaScript，进行布局，处理图层，执行全局 JavaScript 代码，执行时间处理函数，执行函数回调等任务。渲染主线程主要采用排队的方式对任务进行调度。</p><ol><li>在渲染主线程启动时，会进行一个无限循环。</li><li>在每次循环中，会检查消息队列中是否有任务存在。如果有，就会取出第一个任务并执行，执行完成后会进入下一次循环。如果没有任务，则会进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）都可以向消息队列中添加任务，任务会添加在消息队列的末尾。当主线程处于休眠状态时，会将其唤醒，循环取出任务并执行。</li></ol><p><img src="'+o+`" alt="eventLoop"></p><p><strong>那么肯定有兄弟想问啦，任务是否存在优先级呢？</strong></p><p><strong>首先可以肯定的是，任务是没有优先级的，排队先进先出。<u>但是（注意但是）</u>消息队列是有优先级的</strong>。根据 W3C 的最新解释，每一个任务都有一个任务类型，相同类型的任务，都会存在同一个队列中。在一次事件循环中，浏览器会根据实际情况从不同的队列中取出任务执行。<strong>同时浏览器必须准备好一个微任务队列，微任务队列优先级高于其他队列。</strong></p><p>下面我们可以开始回答标题的问题：<strong>阐述一下浏览器中的事件循环？</strong></p><details class="details custom-block"><summary>点我查看</summary><p>事件循环（Event Loop）是 JavaScript 中的一种机制，用于协调 JavaScript 代码的执行顺序和处理异步操作。它是浏览器渲染主线程的工作方式之一。在 Chrome 浏览器中，主线程会开启一个不会结束的循环，每次循环都会从消息队列中取出第一个任务并执行。其他线程可以在合适的时候将任务加入到消息队列末尾。</p><p>在过往版本中，消息队列通常被分为微队列和宏队列。微队列用于处理优先级较高的任务，例如用户交互、动画渲染等。宏队列用于处理优先级较低的任务，例如网络请求、文件读取等。随着浏览器环境的发展，这种简单的分类方式已经不能满足需求。取而代之的是一种更加灵活的处理方式，根据任务的类型和优先级将任务分配到不同的队列中。根据 W3C 的官方解释，浏览器会给每一个任务设置任务类型，将相同类型的任务放在同一个队列中。不同的任务队列会有不同的优先级。</p><p>在一次事件循环中，浏览器可以自行决定先取哪一个队列的任务。同时，浏览器必须存在一个微任务队列，微任务队列一定具有最高的优先级，必须优先调用。这是因为微任务通常与用户交互相关，需要尽快执行以提供良好的用户体验。</p></details><p>经过上文的学习，我相信这个问题一定都有了自己的答案：<strong>JS中的计时器能做到精确计时吗？为什么？</strong></p><details class="details custom-block"><summary>点我查看</summary><p>首先JS中的计时器是无法做到精确计时的，原因如下：</p><ol><li>计算机硬件没有原子钟，无法做到精确计时；</li><li>操作系统的计时函数本身就存在少量偏差，由于JS的计时器最终会调用操作系统的计时函数，因此也就懈怠了这些偏差</li><li>按照W3C的标准，浏览器实现计时器时，如果嵌套超过5层，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒时又带来了偏差</li><li>受事件循环影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></details><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><blockquote><p>应该还算清晰明了吧，做个题试试？</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">async1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async1 start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async1 end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async2 start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async2 end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">async1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><details class="details custom-block"><summary>点我查看执行顺序</summary><ol><li>script start</li><li>async1 start</li><li>async2 start</li><li>script end</li><li>async2 end</li><li>async1 end</li><li>promise1</li></ol><div class="info custom-block"><p class="custom-block-title">🔨 结果分析：</p><ol><li><strong>执行全局代码，首先打印 <code>script start</code></strong></li><li><strong>执行async1方法，打印 <code>async1 start</code>，之后遇到await等待async2方法的执行</strong></li><li><strong>在async2中，打印<code>async2 start</code>，执行遇到定时器函数，交给计时线程处理，全局代码继续向下执行</strong></li><li><strong>在Promise中遇到计时器函数，交由计时线程处理，全局代码向下执行打印<code>script end</code></strong></li><li><strong>在计时线程计时完成后，将任务回调添加到消息队列，完成promise状态改变，打印<code>async2 end</code></strong></li><li><strong>async1中的await等待到了async2的执行完成，打印<code>async1 end</code></strong></li><li><strong>在2秒定时器计时完成后，修改Promise状态，打印<code>promise1</code></strong></li></ol></div></details><h2 id="node中的事件循环" tabindex="-1">node中的事件循环 <a class="header-anchor" href="#node中的事件循环" aria-label="Permalink to &quot;node中的事件循环&quot;">​</a></h2><p>和浏览器不同NodeJs是一种单进程单线程应用程序，但因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。Node.js 的事件循环机制是其实现高并发和高性能的关键之一。当 Node.js 启动时，它会创建一个事件循环，这个循环会不断地执行各种任务，直到没有任务需要执行。 在事件循环的过程中，会先去判断有没有异步任务需要执行，如果有 <code>libuv</code> 会把不同的异步任务分配给不同的线程，形成事件循环。在同步代码执行完后，nodejs 便会进入事件循环，依次执行不同队列中的任务。libuv 会以异步的方式将任务的执行结果返回给 V8 引擎，V8 引擎再返回给用户。如果没有异步任务，代码在执行完成后便直接退出。</p><div class="warning custom-block"><p class="custom-block-title">⚠️注意</p><p>在执行宏任务期间，如果有微任务被添加到微任务队列中，事件循环会在当前宏任务执行完毕后立即执行微任务队列中的所有微任务。</p></div><p><img src="`+p+`" alt="node_eventLoop"> 我们按照之前宏任务，微任务的说法可以划分为：</p><ul><li>宏任务： <ul><li><code>timer*</code>：<strong>计时器队列</strong>，执行定时器到时的回调函数</li><li>pending callback：执行在上一次循环中，没有执行而是指定放在下一次循环执行的回调函数</li><li>idle prepare：node 内部使用 -<code>poll*</code>：<strong>轮询队列</strong>，执行队列中的I/O操作，并根据异步API，得到事件响应时的回调函数。在事件循环阶段如果poll中有回调任务会一次执行回调，直到清空队列。如果没有回调函数，若后续会产生回调函数，则会等待其他队列中的后续回调任务，在来临时结束该阶段，开启下一次循环；如果等待事件超出事件限制，则直接进入下一次事件循环；如果不会再产生回调，则会立即结束当前阶段，并在本轮循环后结束程序。</li><li><code>check*</code>：<strong>检查队列</strong>，负责处理setImmediate定义的回调函数。</li><li>close callbacks：执行所有注册close事件的回调函数</li></ul></li><li>微任务： <ul><li>nextTick</li><li>Promsie</li></ul></li></ul><h3 id="思考题-1" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-1" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><blockquote><p>应该也看懂啦，再来一道题如何？</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">async1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">async1 start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">async1 end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">async2 start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">async2 end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nextTick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">async1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><details class="details custom-block"><summary>点我查看执行顺序</summary><ol><li>script start</li><li>async1 start</li><li>async2 start</li><li>promise1</li><li>script end</li><li>nextTick</li><li>promise2</li><li>promise3</li><li>setTimeout0</li><li>setImmediate</li><li>setTimeout3</li><li>async2 end</li><li>async1 end</li></ol><div class="info custom-block"><p class="custom-block-title">🔨 结果分析：</p><ol><li>执行全局代码，输出<code>script start</code></li><li>执行setTimeout(0)，setTimeout(3)，交给计时器线程开始计时，再倒计时结束前，不会将回调函数加入timer队列</li><li>执行setImmediate，立即将回调函数添加进check队列</li><li>执行 process.nextTick，立刻将回调加入 nextTick 队列</li><li>执行async1，输出<code>async1 start</code>，执行async2，输出<code>async2 start</code>,将后续Promise加入Promise队列</li><li>执行new Promise，输出<code>promise1</code>,将后续Promise任务加入Promise队列</li><li>执行同步代码，输出<code>script end</code></li><li>先执行微任务队列任务输出<code>nextTick</code>, <code>promise2</code>, <code>promise3</code></li><li>进入timer队列，输出<code>setTimeout0</code>, <code>setTimeout3</code>, <code>async2 end</code></li><li>async2执行完成后。async1等待完成输出<code>async1 end</code></li><li>无法预估 check队列和timer队列谁先输出</li></ol></div></details><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>最后一道：<strong>node 和 chrome 的事件循环有什么区别？</strong></p><details class="details custom-block"><summary>点我查看</summary><ol><li><strong>环境：</strong><ul><li><strong>Chrome：</strong> Chrome 浏览器中的事件循环是针对 Web 页面的，处理浏览器环境中的各种事件，如点击、输入等，以及处理来自 Web API 的异步操作，例如 setTimeout、XHR 请求等。</li><li><strong>Node.js：</strong> Node.js 中的事件循环是针对服务器端 JavaScript 运行环境的，处理的是服务器端的异步 I/O 操作，例如文件 I/O、网络 I/O 等，以及处理来自 Node.js API 的异步操作，如定时器、事件监听等。</li></ul></li><li><strong>任务队列：</strong><ul><li><strong>Chrome：</strong> 在 Chrome 中，事件循环包含了宏任务队列（macro-task queue）和微任务队列（micro-task queue）。宏任务队列包括了事件循环的主要任务，而微任务队列用于处理 Promise、MutationObserver 等微任务。</li><li><strong>Node.js：</strong> 在 Node.js 中，事件循环也有宏任务队列和微任务队列的概念，但主要的区别在于它的宏任务队列被称为红任务队列（red task queue），用于处理 I/O 操作、定时器任务等。</li></ul></li><li><strong>API 支持：</strong><ul><li><strong>Chrome：</strong> Chrome 的事件循环可以使用 Web API 提供的各种异步函数，例如 setTimeout、fetch 等。</li><li><strong>Node.js：</strong> Node.js 的事件循环则可以使用其提供的 API，例如 setTimeout、setInterval，以及处理文件系统、网络等 I/O 操作的 API。</li></ul></li><li><strong>事件循环的执行：</strong><ul><li><strong>Chrome：</strong> 在 Chrome 中，事件循环的执行受到浏览器渲染进程的影响，会优先处理 UI 渲染相关的任务。</li><li><strong>Node.js：</strong> 在 Node.js 中，事件循环的执行更加关注 I/O 操作，会根据操作系统底层的事件通知机制来触发相应的事件处理。</li></ul></li></ol></details>`,32),c=[t];function r(y,F,i,D,A,C){return n(),l("div",null,c)}const u=s(e,[["render",r]]);export{m as __pageData,u as default};
